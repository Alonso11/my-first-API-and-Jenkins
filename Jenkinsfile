pipeline {
    agent any
    
    tools {
        maven 'Maven-3.9'
        jdk 'JDK-17'
    }
    
    environment {
        APP_NAME = 'jenkins-demo'
        VERSION = "${BUILD_NUMBER}"
        DOCKER_IMAGE = "${APP_NAME}:${VERSION}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'üîç Clonando repositorio...'
                checkout scm
                sh 'git rev-parse --short HEAD > .git/commit-id'
                script {
                    env.GIT_COMMIT_ID = readFile('.git/commit-id').trim()
                }
            }
        }
        
        stage('Build') {
            steps {
                echo 'üî® Compilando aplicaci√≥n...'
                sh 'mvn clean compile'
            }
        }
        
        stage('Unit Tests') {
            steps {
                echo 'üß™ Ejecutando pruebas unitarias...'
                sh 'mvn test'
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }
        
        stage('Code Analysis') {
            steps {
                echo 'üìä Analizando calidad de c√≥digo...'
                sh 'mvn verify'
            }
        }
        
        stage('Package') {
            steps {
                echo 'üì¶ Empaquetando aplicaci√≥n...'
                sh 'mvn package -DskipTests'
                archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
            }
        }
        
        stage('Docker Build') {
            when {
                branch 'main'
            }
            steps {
                echo 'üê≥ Construyendo imagen Docker...'
                script {
                    sh """
                        echo 'Simulando construcci√≥n de imagen Docker...'
                        echo 'docker build -t ${DOCKER_IMAGE} .'
                    """
                }
            }
        }
        
        stage('Deploy to Dev') {
            when {
                branch 'main'
            }
            steps {
                echo 'üöÄ Desplegando en ambiente de desarrollo...'
                script {
                    sh """
                        echo 'Desplegando versi√≥n ${VERSION}'
                        echo 'Commit: ${GIT_COMMIT_ID}'
                        # Aqu√≠ ir√≠an los comandos reales de deploy
                    """
                }
            }
        }
        
        stage('Integration Tests') {
            when {
                branch 'main'
            }
            steps {
                echo 'üî¨ Ejecutando pruebas de integraci√≥n...'
                sh 'mvn verify -Pintegration-tests || true'
            }
        }
        
        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                input message: '¬øDesplegar a producci√≥n?', ok: 'Desplegar'
                echo 'üéØ Desplegando a producci√≥n...'
                script {
                    sh """
                        echo 'Desplegando a producci√≥n...'
                        echo 'Versi√≥n: ${VERSION}'
                    """
                }
            }
        }
    }
    
    post {
        success {
            echo '‚úÖ Pipeline ejecutado exitosamente!'
            // Aqu√≠ podr√≠as enviar notificaciones (Slack, email, etc.)
        }
        failure {
            echo '‚ùå Pipeline fall√≥!'
            // Notificaci√≥n de fallo
        }
        always {
            echo 'üßπ Limpiando workspace...'
            cleanWs()
        }
    }
}
